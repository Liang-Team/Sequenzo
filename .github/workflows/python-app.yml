# GitHub Actions workflow for Sequenzo package
name: Build Wheels for Sequenzo

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build ${{ matrix.os }} Py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        include:
          - python-version: '3.9'
            python-version-nodot: '39'
          - python-version: '3.10'
            python-version-nodot: '310'
          - python-version: '3.11'
            python-version-nodot: '311'
          - python-version: '3.12'
            python-version-nodot: '312'

    steps:
      - name: Checkout source with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Ensure setuptools/wheel for macOS
        if: runner.os == 'macOS'
        run: python -m pip install --upgrade pip setuptools wheel

      # Add OpenMP support
      - name: Install OpenMP (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install libomp
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix libomp)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix libomp)/include" >> $GITHUB_ENV
          echo "SEQUENZO_ENABLE_OPENMP=1" >> $GITHUB_ENV

      - name: Install OpenMP (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libomp-dev
          echo "SEQUENZO_ENABLE_OPENMP=1" >> $GITHUB_ENV

      - name: Setup MSVC with OpenMP (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Enable OpenMP (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "SEQUENZO_ENABLE_OPENMP=1" >> $env:GITHUB_ENV

      - name: Install R (Windows, without Rtools)
        if: runner.os == 'Windows'
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.3.1'
          rtools-version: none  # 显式跳过 Rtools 安装，避免 PATH 冲突

      # Install dependencies with fallback strategy
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # Use oldest-supported-numpy for builds to ensure forward compatibility
          pip install oldest-supported-numpy || pip install "numpy>=1.21.0"
          pip install --only-binary=all "scipy<1.16" || echo "scipy will be installed in cibuildwheel"
          pip install --prefer-binary Cython pybind11 build "cibuildwheel==2.23.3" twine
          # Note: rpy2 and fastcluster are optional dependencies, only installed for macOS builds
          if [ "$RUNNER_OS" == "macOS" ]; then
            pip install --prefer-binary rpy2 || echo "rpy2 installation skipped (optional dependency)"
            pip install --prefer-binary fastcluster || echo "fastcluster installation skipped (optional dependency)"
          fi
        shell: bash

      - name: Clean previous build outputs
        run: |
          rm -rf build/ dist/ *.egg-info
          find . -name "*.so" -delete
        shell: bash

      - name: Build wheels with cibuildwheel
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp${{ matrix.python-version-nodot }}-*"  # 只构建当前 Python 版本的轮子 (e.g., cp39-*, cp310-*)
          CIBW_SKIP: "*-musllinux* pp*"  # 跳过 musllinux 和 PyPy
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_MACOS: "universal2"
          CIBW_BUILD_VERBOSITY: "1"

          # Environment variables
          CIBW_ENVIRONMENT_LINUX: SEQUENZO_ENABLE_OPENMP=1
          CIBW_ENVIRONMENT_MACOS: SEQUENZO_ENABLE_OPENMP=1 ARCHFLAGS="-arch x86_64 -arch arm64" _PYTHON_HOST_PLATFORM="macosx-10.9-universal2" CMAKE_OSX_ARCHITECTURES="x86_64;arm64"
          CIBW_ENVIRONMENT_WINDOWS: SEQUENZO_ENABLE_OPENMP=1 DISTUTILS_USE_SDK=1

          # macOS: ensure libomp is available and set ARCHFLAGS for universal2
          CIBW_BEFORE_BUILD_MACOS: |
            echo "Installing build dependencies for macOS"
            python -m pip install --upgrade pip
            # Check current architecture
            CURRENT_ARCH=$(uname -m)
            echo "Current architecture: $CURRENT_ARCH"
            # Ensure both architectures of libomp are available for universal2 build
            if [ "$CURRENT_ARCH" = "arm64" ]; then
              echo "On ARM64, checking for universal libomp..."
              # Check if x86_64 brew is available for cross-arch dependencies
              if [ -f /usr/local/bin/brew ]; then
                echo "x86_64 Homebrew found at /usr/local/bin/brew"
                arch -x86_64 /usr/local/bin/brew list libomp || arch -x86_64 /usr/local/bin/brew install libomp
              fi
            fi
            echo "libomp setup complete"

          # Linux: minimal build dependencies (skip R/rpy2 - they're optional)
          CIBW_BEFORE_BUILD_LINUX: |
            echo "Installing minimal build dependencies for Linux"
            python -m pip install --upgrade pip
            echo "Skipping R/rpy2 installation - they are optional dependencies"

          # Windows: setup MSVC environment
          CIBW_BEFORE_BUILD_WINDOWS: |
            echo "Setting up MSVC environment"
            call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
            set PATH="C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.44.35207\bin\HostX64\x64";%PATH%
            echo %PATH%
            echo "Using minimal build dependencies"
            python -m pip install --upgrade pip

          # Universal dependency installation (fallback)
          CIBW_BEFORE_BUILD: >
            echo "Using setup.py dependencies only"

          # macOS: skip R installation for tests (it's optional)
          CIBW_BEFORE_TEST_MACOS: |
            echo "Skipping R installation for tests - rpy2 is optional"

          # Linux: skip R installation for tests (it's optional)
          CIBW_BEFORE_TEST_LINUX: |
            echo "Skipping R installation for tests - rpy2 is optional"

          # Test command: use heredoc to keep the entire script in one shell command (fix Linux quoting)
          CIBW_TEST_COMMAND: |
            python - <<'PY'
            import importlib
            import sys
            import numpy as np

            import sequenzo
            print('Sequenzo import successful')

            mod = importlib.util.find_spec('sequenzo.clustering.clustering_c_code')
            print('Clustering C++ extensions loaded' if mod else 'WARNING: Clustering C++ extensions not found')

            try:
                from sequenzo.dissimilarity_measures import c_code
                print('Dissimilarity measures C++ extensions (c_code) loaded successfully')
                
                # Test specific C++ classes
                try:
                    # Test if classes are available (don't instantiate to avoid errors)
                    if hasattr(c_code, 'OMdistance'):
                        print('✓ OMdistance class available')
                    if hasattr(c_code, 'OMspellDistance'):
                        print('✓ OMspellDistance class available')
                    if hasattr(c_code, 'DHDdistance'):
                        print('✓ DHDdistance class available')
                    if hasattr(c_code, 'LCPdistance'):
                        print('✓ LCPdistance class available')
                    if hasattr(c_code, 'dist2matrix'):
                        print('✓ dist2matrix class available')
                except Exception as e:
                    print(f'WARNING: Some C++ classes may not be available: {e}')
                    
            except ImportError as e:
                print(f'ERROR: Dissimilarity measures C++ extensions (c_code) failed to load: {e}')

            cython_modules = [
                'get_sm_trate_substitution_cost_matrix',
                'seqconc', 
                'seqdss',
                'seqdur',
                'seqlength'
            ]
            
            for module_name in cython_modules:
                try:
                    module = __import__(f'sequenzo.dissimilarity_measures.utils.{module_name}', fromlist=[module_name])
                    print(f'✓ Cython module {module_name} loaded successfully')
                except ImportError as e:
                    print(f'ERROR: Cython module {module_name} failed to load: {e}')

            try:
                from sequenzo.dissimilarity_measures.utils import (
                    get_sm_trate_substitution_cost_matrix, seqconc, seqdss, seqdur, seqlength
                )
                print('✓ All utility functions imported successfully')
            except ImportError as e:
                print(f'ERROR: Utility functions failed to load: {e}')

            try:
                import rpy2.robjects as ro
                from rpy2.robjects.packages import importr
                print('R environment (rpy2) loaded successfully')
                try:
                    fastcluster_r = importr('fastcluster')
                    print('R fastcluster package available')
                except Exception as e:
                    print(f'WARNING: R fastcluster package not available: {e}')
            except ImportError as e:
                print(f'WARNING: R environment (rpy2) not available: {e}')
            PY

          # Windows test command using python -c with exec for multiline code
          CIBW_TEST_COMMAND_WINDOWS: |
            echo "Testing Sequenzo wheel on Windows"
            echo "" > test_sequenzo_ci.py
            Add-Content test_sequenzo_ci.py @"
            import importlib, sys
            import numpy as np
            import sequenzo
            print('Sequenzo import successful')
          
            mod = importlib.util.find_spec('sequenzo.clustering.clustering_c_code')
            print('Clustering C++ extensions loaded' if mod else 'WARNING: Clustering C++ extensions not found')
          
            try:
                from sequenzo.dissimilarity_measures import c_code
                print('✓ Dissimilarity measures C++ extensions (c_code) loaded successfully')
                for name in ['OMdistance', 'OMspellDistance', 'DHDdistance', 'LCPdistance', 'dist2matrix']:
                    if hasattr(c_code, name):
                        print(f'✓ {name} class available')
            except ImportError as e:
                print(f'ERROR: Failed to import c_code: {e}')
          
            try:
                import rpy2.robjects as ro
                from rpy2.robjects.packages import importr
                print('R environment (rpy2) loaded successfully')
                try:
                    importr('fastcluster')
                    print('R fastcluster package available')
                except Exception as e:
                    print(f'WARNING: R fastcluster package not available: {e}')
            except ImportError as e:
                print(f'WARNING: R environment (rpy2) not available: {e}')
            "@
            python test_sequenzo_ci.py

      - name: Show dist content
        run: ls -lah dist/
        shell: bash

      - name: Check wheels
        run: twine check dist/*

      - name: Verify OpenMP Support
        run: |
          echo "=== Verifying built wheels ==="
          python -c "
          import subprocess
          import sys
          import os
          
          # 精确匹配当前 Python 版本的轮子 (e.g., cp39, cp310)
          py_tag = 'cp${{ matrix.python-version }}'.replace('.', '')
          wheel_files = [f for f in os.listdir('dist') if f.endswith('.whl') and py_tag in f]
          if wheel_files:
              wheel_file = wheel_files[0]
              print(f'Installing wheel: {wheel_file} (Python tag: {py_tag})')
              subprocess.run([sys.executable, '-m', 'pip', 'install', '--force-reinstall', f'dist/{wheel_file}'], check=True)
              
              import sequenzo
              print('Sequenzo import successful')
              
              try:
                  import sequenzo.clustering.clustering_c_code as cc
                  print('C++ extensions loaded successfully')
              except ImportError as e:
                  print(f'WARNING: C++ extensions loading failed: {e}')
          else:
              print('ERROR: No matching wheel files found')
          " || echo "Verification completed with warnings"
        shell: bash

      - name: Run Integration Tests (Quickstart Workflow)
        run: |
          echo "=== Running integration tests based on quickstart tutorial ==="
          # Install wheel first
          python -c "
          import subprocess
          import sys
          import os
          
          py_tag = 'cp${{ matrix.python-version }}'.replace('.', '')
          wheel_files = [f for f in os.listdir('dist') if f.endswith('.whl') and py_tag in f]
          if wheel_files:
              wheel_file = wheel_files[0]
              print(f'Installing wheel for testing: {wheel_file}')
              subprocess.run([sys.executable, '-m', 'pip', 'install', '--force-reinstall', f'dist/{wheel_file}'], check=True)
          "
          
          # Install pytest if not already installed
          pip install pytest
          
          # Run the integration test
          pytest tests/test_quickstart_integration.py -v -s || echo "Integration tests completed with warnings"
        shell: bash

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/